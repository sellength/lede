# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#

name: OpenWrt-CI
on:
  #schedule:
  #  - cron: 0 20 * * *
  release:
    types: [published]
  push:
    branches:
      - master
jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean


          df -h
      #自定义插件主题#
      - name: 自定义插件主题。
        run: |
          cd package
          mkdir openwrt-packages
          cd openwrt-packages
          # argon主题
          git clone https://github.com/jerrykuku/luci-theme-argon.git 
          # rosy主题
          git clone https://github.com/rosywrt/luci-theme-rosy.git
          # vssr
          git clone https://github.com/jerrykuku/luci-app-vssr.git
          git clone https://github.com/kenzok8/small.git
      - name: Update feeds
        run: |
          # echo 'src-git helloworld https://github.com/fw876/helloworld' >> ./feeds.conf.default
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a   
     
      - name: Generate configuration file
        run: |
         cat >> .config <<EOF
         CONFIG_PACKAGE_luci-proto-wireguard=y
         CONFIG_PACKAGE_shadowsocksr-libev-ssr-local=y
         CONFIG_PACKAGE_shadowsocksr-libev-ssr-redir=y
         CONFIG_PACKAGE_shadowsocksr-libev-ssr-check=y
         CONFIG_PACKAGE_simple-obfs=y
         CONFIG_PACKAGE_xray-core=y
         CONFIG_PACKAGE_trojan=y
         CONFIG_PACKAGE_xray-plugin=y
         CONFIG_PACKAGE_shadowsocksr-libev-ssr-server=y
         CONFIG_PACKAGE_luci-app-vssr=y
         CONFIG_PACKAGE_wireguard-kmod=y
         CONFIG_PACKAGE_luci-app-wireguard=y
         CONFIG_PACKAGE_wireguard-tools=y
         CONFIG_PACKAGE_luci-theme-argon=y
         CONFIG_PACKAGE_luci-theme-rosy=y
         CONFIG_PACKAGE_luci-app-webadmin=y
         CONFIG_PACKAGE_luci-app-ttyd=y
         CONFIG_PACKAGE_luci-app-ddns=y
         CONFIG_PACKAGE_ddns-scripts_aliyun=y
         CONFIG_PACKAGE_ddns-scripts_dnspod=y
         CONFIG_PACKAGE_autosamba=n
         CONFIG_PACKAGE_samba36-server=n
         CONFIG_PACKAGE_luci-app-samba=n
         CONFIG_PACKAGE_luci-app-samba4=y
         CONFIG_PACKAGE_luci-app-accesscontrol=n
         CONFIG_PACKAGE_luci-app-adbyby-plus=n
         CONFIG_PACKAGE_luci-app-ipsec-vpnd=n
         CONFIG_PACKAGE_luci-app-zerotier=n
         CONFIG_PACKAGE_UnblockNeteaseMusic-Go=n
         CONFIG_PACKAGE_luci-app-unblockmusic=n
         CONFIG_PACKAGE_UnblockNeteaseMusic=n
         CONFIG_PACKAGE_luci-app-xlnetacc=n
         CONFIG_PACKAGE_luci-app-wrtbwmon=n
         CONFIG_PACKAGE_luci-app-nlbwmon=n
         CONFIG_PACKAGE_luci-i18n-nlbwmon-zh-cn=n
         CONFIG_PACKAGE_nlbwmon=n
         CONFIG_TARGET_x86=y
         CONFIG_TARGET_x86_64=y
         CONFIG_TARGET_x86_64_Generic=y
         CONFIG_PACKAGE_grub2-efi=y
         CONFIG_GRUB_IMAGES=y
         CONFIG_GRUB_EFI_IMAGES=y
         CONFIG_TARGET_IMAGES_GZIP=y
         CONFIG_TARGET_KERNEL_PARTSIZE=256
         CONFIG_TARGET_ROOTFS_PARTSIZE=1024
         EOF
         make defconfig
      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;
          
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/
      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
